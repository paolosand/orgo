define(['dart_sdk', 'packages/smooth_page_indicator/src/effects/indicator_effect.dart', 'packages/flutter/src/material/colors.dart', 'packages/flutter/src/painting/colors.dart'], (function load__packages__smooth_page_indicator__src__painters__scrolling_dots_painter_with_fixed_center_dart(dart_sdk, packages__smooth_page_indicator__src__effects__indicator_effect$46dart, packages__flutter__src__material__colors$46dart, packages__flutter__src__painting__colors$46dart) {
  'use strict';
  const core = dart_sdk.core;
  const ui = dart_sdk.ui;
  const math = dart_sdk.math;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const indicator_painter = packages__smooth_page_indicator__src__effects__indicator_effect$46dart.src__painters__indicator_painter;
  const indicator_effect = packages__smooth_page_indicator__src__effects__indicator_effect$46dart.src__effects__indicator_effect;
  const colors = packages__flutter__src__material__colors$46dart.src__material__colors;
  const colors$ = packages__flutter__src__painting__colors$46dart.src__painting__colors;
  var scrolling_dots_painter_with_fixed_center = Object.create(dart.library);
  var scrolling_dots_painter = Object.create(dart.library);
  var scrolling_dots_effect = Object.create(dart.library);
  var color_transition_painter = Object.create(dart.library);
  var color_transition_effect = Object.create(dart.library);
  var smooth_page_indicator = Object.create(dart.library);
  var $floor = dartx.floor;
  var $toInt = dartx.toInt;
  var $modulo = dartx['%'];
  dart._checkModuleNullSafetyMode(false);
  var T = {
    intL: () => (T.intL = dart.constFn(dart.legacy(core.int)))(),
    ColorL: () => (T.ColorL = dart.constFn(dart.legacy(ui.Color)))(),
    numL: () => (T.numL = dart.constFn(dart.legacy(core.num)))()
  };
  var T$Eval = Object.assign({
    _: () => T$Eval
  }, T);
  var S = {
    _: () => S
  };
  var S$Eval = Object.assign({
    _: () => S$Eval
  }, S);
  const CT = Object.create({
    _: () => (C, CT)
  });
  dart.defineLazy(CT, {
    get C2() {
      return C[2] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4294638330.0
      });
    },
    get C3() {
      return C[3] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4294309365.0
      });
    },
    get C4() {
      return C[4] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4293848814.0
      });
    },
    get C5() {
      return C[5] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4292927712.0
      });
    },
    get C6() {
      return C[6] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4292269782.0
      });
    },
    get C7() {
      return C[7] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4290624957.0
      });
    },
    get C8() {
      return C[8] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4288585374.0
      });
    },
    get C9() {
      return C[9] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4285887861.0
      });
    },
    get C10() {
      return C[10] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4284572001.0
      });
    },
    get C11() {
      return C[11] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4282532418.0
      });
    },
    get C12() {
      return C[12] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4281348144.0
      });
    },
    get C13() {
      return C[13] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4280361249.0
      });
    },
    get C1() {
      return C[1] = dart.constMap(T.intL(), T.ColorL(), [50, C[2] || CT.C2, 100, C[3] || CT.C3, 200, C[4] || CT.C4, 300, C[5] || CT.C5, 350, C[6] || CT.C6, 400, C[7] || CT.C7, 500, C[8] || CT.C8, 600, C[9] || CT.C9, 700, C[10] || CT.C10, 800, C[11] || CT.C11, 850, C[12] || CT.C12, 900, C[13] || CT.C13]);
    },
    get C0() {
      return C[0] = dart.const({
        __proto__: colors.MaterialColor.prototype,
        [Color_value]: 4288585374.0,
        [ColorSwatch__swatch]: C[1] || CT.C1
      });
    },
    get C16() {
      return C[16] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4293454582.0
      });
    },
    get C17() {
      return C[17] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4291152617.0
      });
    },
    get C18() {
      return C[18] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4288653530.0
      });
    },
    get C19() {
      return C[19] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4286154443.0
      });
    },
    get C20() {
      return C[20] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4284246976.0
      });
    },
    get C21() {
      return C[21] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4282339765.0
      });
    },
    get C22() {
      return C[22] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4281944491.0
      });
    },
    get C23() {
      return C[23] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4281352095.0
      });
    },
    get C24() {
      return C[24] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4280825235.0
      });
    },
    get C25() {
      return C[25] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4279903102.0
      });
    },
    get C15() {
      return C[15] = dart.constMap(T.intL(), T.ColorL(), [50, C[16] || CT.C16, 100, C[17] || CT.C17, 200, C[18] || CT.C18, 300, C[19] || CT.C19, 400, C[20] || CT.C20, 500, C[21] || CT.C21, 600, C[22] || CT.C22, 700, C[23] || CT.C23, 800, C[24] || CT.C24, 900, C[25] || CT.C25]);
    },
    get C14() {
      return C[14] = dart.const({
        __proto__: colors.MaterialColor.prototype,
        [Color_value]: 4282339765.0,
        [ColorSwatch__swatch]: C[15] || CT.C15
      });
    },
    get C26() {
      return C[26] = dart.const({
        __proto__: ui.PaintingStyle.prototype,
        [_name]: "PaintingStyle.fill",
        index: 0
      });
    }
  }, false);
  var C = Array(27).fill(void 0);
  var I = [
    "package:smooth_page_indicator/src/painters/scrolling_dots_painter_with_fixed_center.dart",
    "package:smooth_page_indicator/src/painters/scrolling_dots_painter.dart",
    "file:///C:/src/flutter/.pub-cache/hosted/pub.dartlang.org/smooth_page_indicator-0.2.3/lib/src/effects/scrolling_dots_effect.dart",
    "package:smooth_page_indicator/src/effects/scrolling_dots_effect.dart",
    "package:smooth_page_indicator/src/painters/color_transition_painter.dart",
    "file:///C:/src/flutter/.pub-cache/hosted/pub.dartlang.org/smooth_page_indicator-0.2.3/lib/src/effects/color_transition_effect.dart",
    "package:smooth_page_indicator/src/effects/color_transition_effect.dart"
  ];
  var effect$ = dart.privateName(scrolling_dots_painter_with_fixed_center, "ScrollingDotsWithFixedCenterPainter.effect");
  var _calcBounds = dart.privateName(scrolling_dots_painter_with_fixed_center, "_calcBounds");
  scrolling_dots_painter_with_fixed_center.ScrollingDotsWithFixedCenterPainter = class ScrollingDotsWithFixedCenterPainter extends indicator_painter.IndicatorPainter {
    get effect() {
      return this[effect$];
    }
    set effect(value) {
      super.effect = value;
    }
    paint(canvas, size) {
      let t0, t0$, t0$0;
      let current = this.offset[$floor]();
      let dotOffset = dart.notNull(this.offset) - current;
      let dotPaint = (t0 = ui.Paint.new(), (() => {
        t0.strokeWidth = this.effect.strokeWidth;
        t0.style = this.effect.paintStyle;
        return t0;
      })());
      for (let index = 0; index < dart.notNull(this.count); index = index + 1) {
        let color = this.effect.dotColor;
        if (index === current) {
          color = ui.Color.lerp(this.effect.activeDotColor, this.effect.dotColor, dotOffset);
        } else if (index - 1 === current) {
          color = ui.Color.lerp(this.effect.activeDotColor, this.effect.dotColor, 1 - dotOffset);
        }
        let scale = 1.0;
        let smallDotScale = 0.66;
        let revDotOffset = 1 - dotOffset;
        let switchPoint = (dart.notNull(this.effect.maxVisibleDots) - 1) / 2;
        if (dart.notNull(this.count) > dart.notNull(this.effect.maxVisibleDots)) {
          if (index >= current - switchPoint && index <= current + (switchPoint + 1)) {
            if (index === current + switchPoint) {
              scale = smallDotScale + (1 - smallDotScale) * dotOffset;
            } else if (index === current - (switchPoint - 1)) {
              scale = 1 - (1 - smallDotScale) * dotOffset;
            } else if (index === current - switchPoint) {
              scale = smallDotScale * revDotOffset;
            } else if (index === current + (switchPoint + 1)) {
              scale = smallDotScale * dotOffset;
            }
          } else {
            continue;
          }
        }
        let rRect = this[_calcBounds](size.height, dart.notNull(size.width) / 2 - dart.notNull(this.offset) * (dart.notNull(this.effect.dotWidth) + dart.notNull(this.effect.spacing)), index, scale);
        canvas.drawRRect(rRect, (t0$ = dotPaint, (() => {
          t0$.color = color;
          return t0$;
        })()));
      }
      let rRect = this[_calcBounds](size.height, dart.notNull(size.width) / 2, 0, this.effect.activeDotScale);
      canvas.drawRRect(rRect, (t0$0 = ui.Paint.new(), (() => {
        t0$0.color = this.effect.activeDotColor;
        t0$0.strokeWidth = this.effect.activeStrokeWidth;
        t0$0.style = ui.PaintingStyle.stroke;
        return t0$0;
      })()));
    }
    [_calcBounds](canvasHeight, startingPoint, i, scale = 1) {
      let scaledWidth = dart.notNull(this.effect.dotWidth) * dart.notNull(scale);
      let scaledHeight = dart.notNull(this.effect.dotHeight) * dart.notNull(scale);
      let xPos = dart.notNull(startingPoint) + (dart.notNull(this.effect.dotWidth) + dart.notNull(this.effect.spacing)) * dart.notNull(i);
      let yPos = dart.notNull(canvasHeight) / 2;
      return new ui.RRect.fromLTRBR(xPos - scaledWidth / 2, yPos - scaledHeight / 2, xPos + scaledWidth / 2, yPos + scaledHeight / 2, this.dotRadius['*'](scale));
    }
  };
  (scrolling_dots_painter_with_fixed_center.ScrollingDotsWithFixedCenterPainter.new = function(opts) {
    let effect = opts && 'effect' in opts ? opts.effect : null;
    let count = opts && 'count' in opts ? opts.count : null;
    let offset = opts && 'offset' in opts ? opts.offset : null;
    this[effect$] = effect;
    scrolling_dots_painter_with_fixed_center.ScrollingDotsWithFixedCenterPainter.__proto__.new.call(this, offset, count, effect);
    ;
  }).prototype = scrolling_dots_painter_with_fixed_center.ScrollingDotsWithFixedCenterPainter.prototype;
  dart.addTypeTests(scrolling_dots_painter_with_fixed_center.ScrollingDotsWithFixedCenterPainter);
  dart.addTypeCaches(scrolling_dots_painter_with_fixed_center.ScrollingDotsWithFixedCenterPainter);
  dart.setMethodSignature(scrolling_dots_painter_with_fixed_center.ScrollingDotsWithFixedCenterPainter, () => ({
    __proto__: dart.getMethods(scrolling_dots_painter_with_fixed_center.ScrollingDotsWithFixedCenterPainter.__proto__),
    paint: dart.fnType(dart.void, [dart.legacy(ui.Canvas), dart.legacy(ui.Size)]),
    [_calcBounds]: dart.fnType(dart.legacy(ui.RRect), [dart.legacy(core.double), dart.legacy(core.double), dart.legacy(core.num)], [dart.legacy(core.double)])
  }));
  dart.setLibraryUri(scrolling_dots_painter_with_fixed_center.ScrollingDotsWithFixedCenterPainter, I[0]);
  dart.setFieldSignature(scrolling_dots_painter_with_fixed_center.ScrollingDotsWithFixedCenterPainter, () => ({
    __proto__: dart.getFields(scrolling_dots_painter_with_fixed_center.ScrollingDotsWithFixedCenterPainter.__proto__),
    effect: dart.finalFieldType(dart.legacy(scrolling_dots_effect.ScrollingDotsEffect))
  }));
  var effect$0 = dart.privateName(scrolling_dots_painter, "ScrollingDotsPainter.effect");
  scrolling_dots_painter.ScrollingDotsPainter = class ScrollingDotsPainter extends indicator_painter.IndicatorPainter {
    get effect() {
      return this[effect$0];
    }
    set effect(value) {
      super.effect = value;
    }
    paint(canvas, size) {
      let t0, t0$;
      let current = super.offset[$floor]();
      let switchPoint = (dart.notNull(this.effect.maxVisibleDots) / 2)[$floor]();
      let firstVisibleDot = current < switchPoint || dart.notNull(this.count) - 1 < dart.notNull(this.effect.maxVisibleDots) ? 0 : math.min(T.intL(), current - switchPoint, dart.notNull(this.count) - dart.notNull(this.effect.maxVisibleDots));
      let lastVisibleDot = math.min(T.intL(), firstVisibleDot + dart.notNull(this.effect.maxVisibleDots), dart.notNull(this.count) - 1);
      let inPreScrollRange = current < switchPoint;
      let inAfterScrollRange = current >= dart.notNull(this.count) - 1 - switchPoint;
      let willStartScrolling = current + 1 === switchPoint + 1;
      let willStopScrolling = current + 1 === dart.notNull(this.count) - 1 - switchPoint;
      let dotOffset = dart.notNull(this.offset) - this.offset[$toInt]();
      let dotPaint = (t0 = ui.Paint.new(), (() => {
        t0.strokeWidth = this.effect.strokeWidth;
        t0.style = this.effect.paintStyle;
        return t0;
      })());
      let drawingAnchor = inPreScrollRange || inAfterScrollRange ? -(firstVisibleDot * dart.notNull(this.distance)) : -((dart.notNull(this.offset) - switchPoint) * dart.notNull(this.distance));
      let smallDotScale = 0.66;
      let activeScale = dart.notNull(this.effect.activeDotScale) - 1.0;
      for (let index = firstVisibleDot; index <= lastVisibleDot; index = index + 1) {
        let color = this.effect.dotColor;
        let scale = 1.0;
        if (index === current) {
          color = ui.Color.lerp(this.effect.activeDotColor, this.effect.dotColor, dotOffset);
          scale = dart.notNull(this.effect.activeDotScale) - activeScale * dotOffset;
        } else if (index - 1 === current) {
          color = ui.Color.lerp(this.effect.dotColor, this.effect.activeDotColor, dotOffset);
          scale = 1.0 + activeScale * dotOffset;
        } else if (dart.notNull(this.count) - 1 < dart.notNull(this.effect.maxVisibleDots)) {
          scale = 1.0;
        } else if (index === firstVisibleDot) {
          if (willStartScrolling) {
            scale = 1.0 * (1.0 - dotOffset);
          } else if (inAfterScrollRange) {
            scale = smallDotScale;
          } else if (!inPreScrollRange) {
            scale = smallDotScale * (1.0 - dotOffset);
          }
        } else if (index === firstVisibleDot + 1 && !(inPreScrollRange || inAfterScrollRange)) {
          scale = 1.0 - dotOffset * (1.0 - smallDotScale);
        } else if (index === lastVisibleDot - 1.0) {
          if (inPreScrollRange) {
            scale = smallDotScale;
          } else if (!inAfterScrollRange) {
            scale = smallDotScale + (1.0 - smallDotScale) * dotOffset;
          }
        } else if (index === lastVisibleDot) {
          if (inPreScrollRange) {
            scale = 0.0;
          } else if (willStopScrolling) {
            scale = dotOffset;
          } else if (!inAfterScrollRange) {
            scale = smallDotScale * dotOffset;
          }
        }
        let scaledWidth = dart.notNull(this.effect.dotWidth) * scale;
        let scaledHeight = dart.notNull(this.effect.dotHeight) * scale;
        let yPos = dart.notNull(size.height) / 2;
        let xPos = dart.notNull(this.effect.dotWidth) / 2 + drawingAnchor + index * dart.notNull(this.distance);
        let rRect = new ui.RRect.fromLTRBR(xPos - scaledWidth / 2 + dart.notNull(this.effect.spacing) / 2, yPos - scaledHeight / 2, xPos + scaledWidth / 2 + dart.notNull(this.effect.spacing) / 2, yPos + scaledHeight / 2, this.dotRadius['*'](scale));
        canvas.drawRRect(rRect, (t0$ = dotPaint, (() => {
          t0$.color = color;
          return t0$;
        })()));
      }
    }
  };
  (scrolling_dots_painter.ScrollingDotsPainter.new = function(opts) {
    let effect = opts && 'effect' in opts ? opts.effect : null;
    let count = opts && 'count' in opts ? opts.count : null;
    let offset = opts && 'offset' in opts ? opts.offset : null;
    this[effect$0] = effect;
    scrolling_dots_painter.ScrollingDotsPainter.__proto__.new.call(this, offset, count, effect);
    ;
  }).prototype = scrolling_dots_painter.ScrollingDotsPainter.prototype;
  dart.addTypeTests(scrolling_dots_painter.ScrollingDotsPainter);
  dart.addTypeCaches(scrolling_dots_painter.ScrollingDotsPainter);
  dart.setMethodSignature(scrolling_dots_painter.ScrollingDotsPainter, () => ({
    __proto__: dart.getMethods(scrolling_dots_painter.ScrollingDotsPainter.__proto__),
    paint: dart.fnType(dart.void, [dart.legacy(ui.Canvas), dart.legacy(ui.Size)])
  }));
  dart.setLibraryUri(scrolling_dots_painter.ScrollingDotsPainter, I[1]);
  dart.setFieldSignature(scrolling_dots_painter.ScrollingDotsPainter, () => ({
    __proto__: dart.getFields(scrolling_dots_painter.ScrollingDotsPainter.__proto__),
    effect: dart.finalFieldType(dart.legacy(scrolling_dots_effect.ScrollingDotsEffect))
  }));
  var activeStrokeWidth$ = dart.privateName(scrolling_dots_effect, "ScrollingDotsEffect.activeStrokeWidth");
  var activeDotScale$ = dart.privateName(scrolling_dots_effect, "ScrollingDotsEffect.activeDotScale");
  var maxVisibleDots$ = dart.privateName(scrolling_dots_effect, "ScrollingDotsEffect.maxVisibleDots");
  var fixedCenter$ = dart.privateName(scrolling_dots_effect, "ScrollingDotsEffect.fixedCenter");
  var Color_value = dart.privateName(ui, "Color.value");
  var ColorSwatch__swatch = dart.privateName(colors$, "ColorSwatch._swatch");
  var _name = dart.privateName(ui, "_name");
  scrolling_dots_effect.ScrollingDotsEffect = class ScrollingDotsEffect extends indicator_effect.IndicatorEffect {
    get activeStrokeWidth() {
      return this[activeStrokeWidth$];
    }
    set activeStrokeWidth(value) {
      super.activeStrokeWidth = value;
    }
    get activeDotScale() {
      return this[activeDotScale$];
    }
    set activeDotScale(value) {
      super.activeDotScale = value;
    }
    get maxVisibleDots() {
      return this[maxVisibleDots$];
    }
    set maxVisibleDots(value) {
      super.maxVisibleDots = value;
    }
    get fixedCenter() {
      return this[fixedCenter$];
    }
    set fixedCenter(value) {
      super.fixedCenter = value;
    }
    calculateSize(count) {
      let width = (dart.notNull(this.dotWidth) + dart.notNull(this.spacing)) * math.min(T.numL(), count, this.maxVisibleDots);
      if (dart.test(this.fixedCenter) && dart.notNull(count) <= dart.notNull(this.maxVisibleDots)) {
        width = (dart.notNull(count) * 2 - 1) * (dart.notNull(this.dotWidth) + dart.notNull(this.spacing));
      }
      return new ui.Size.new(width, dart.notNull(this.dotHeight) * dart.notNull(this.activeDotScale));
    }
    hitTestDots(dx, count, current) {
      let switchPoint = (dart.notNull(this.maxVisibleDots) / 2)[$floor]();
      if (dart.test(this.fixedCenter)) {
        return dart.notNull(super.hitTestDots(dx, count, current)) - switchPoint + current[$floor]();
      } else {
        let firstVisibleDot = dart.notNull(current) < switchPoint || dart.notNull(count) - 1 < dart.notNull(this.maxVisibleDots) ? 0 : math.min(T.numL(), dart.notNull(current) - switchPoint, dart.notNull(count) - dart.notNull(this.maxVisibleDots))[$floor]();
        let lastVisibleDot = math.min(T.intL(), firstVisibleDot + dart.notNull(this.maxVisibleDots), dart.notNull(count) - 1)[$floor]();
        let offset = 0.0;
        for (let index = firstVisibleDot; index <= lastVisibleDot; index = index + 1) {
          if (dart.notNull(dx) <= (offset = offset + (dart.notNull(this.dotWidth) + dart.notNull(this.spacing)))) {
            return index;
          }
        }
      }
      return -1;
    }
    buildPainter(count, offset) {
      if (dart.test(this.fixedCenter)) {
        return new scrolling_dots_painter_with_fixed_center.ScrollingDotsWithFixedCenterPainter.new({count: count, offset: offset, effect: this});
      } else {
        return new scrolling_dots_painter.ScrollingDotsPainter.new({count: count, offset: offset, effect: this});
      }
    }
  };
  (scrolling_dots_effect.ScrollingDotsEffect.new = function(opts) {
    let activeStrokeWidth = opts && 'activeStrokeWidth' in opts ? opts.activeStrokeWidth : 1.5;
    let activeDotScale = opts && 'activeDotScale' in opts ? opts.activeDotScale : 1.3;
    let maxVisibleDots = opts && 'maxVisibleDots' in opts ? opts.maxVisibleDots : 5;
    let fixedCenter = opts && 'fixedCenter' in opts ? opts.fixedCenter : false;
    let offset = opts && 'offset' in opts ? opts.offset : null;
    let dotWidth = opts && 'dotWidth' in opts ? opts.dotWidth : 16;
    let dotHeight = opts && 'dotHeight' in opts ? opts.dotHeight : 16;
    let spacing = opts && 'spacing' in opts ? opts.spacing : 8;
    let radius = opts && 'radius' in opts ? opts.radius : 16;
    let dotColor = opts && 'dotColor' in opts ? opts.dotColor : C[0] || CT.C0;
    let activeDotColor = opts && 'activeDotColor' in opts ? opts.activeDotColor : C[14] || CT.C14;
    let strokeWidth = opts && 'strokeWidth' in opts ? opts.strokeWidth : 1;
    let paintStyle = opts && 'paintStyle' in opts ? opts.paintStyle : C[26] || CT.C26;
    this[activeStrokeWidth$] = activeStrokeWidth;
    this[activeDotScale$] = activeDotScale;
    this[maxVisibleDots$] = maxVisibleDots;
    this[fixedCenter$] = fixedCenter;
    if (!(activeStrokeWidth != null)) dart.assertFailed(null, I[2], 41, 16, "activeStrokeWidth != null");
    if (!(fixedCenter != null)) dart.assertFailed(null, I[2], 42, 16, "fixedCenter != null");
    if (!(activeDotScale != null)) dart.assertFailed(null, I[2], 43, 16, "activeDotScale != null");
    if (!(dart.notNull(activeDotScale) >= 0.0)) dart.assertFailed(null, I[2], 44, 16, "activeDotScale >= 0.0");
    if (!(dart.notNull(maxVisibleDots) >= 5 && maxVisibleDots[$modulo](2) !== 0)) dart.assertFailed(null, I[2], 45, 16, "maxVisibleDots >= 5 && maxVisibleDots % 2 != 0");
    scrolling_dots_effect.ScrollingDotsEffect.__proto__.new.call(this, {dotWidth: dotWidth, dotHeight: dotHeight, spacing: spacing, radius: radius, strokeWidth: strokeWidth, paintStyle: paintStyle, dotColor: dotColor, activeDotColor: activeDotColor});
    ;
  }).prototype = scrolling_dots_effect.ScrollingDotsEffect.prototype;
  dart.addTypeTests(scrolling_dots_effect.ScrollingDotsEffect);
  dart.addTypeCaches(scrolling_dots_effect.ScrollingDotsEffect);
  dart.setMethodSignature(scrolling_dots_effect.ScrollingDotsEffect, () => ({
    __proto__: dart.getMethods(scrolling_dots_effect.ScrollingDotsEffect.__proto__),
    buildPainter: dart.fnType(dart.legacy(indicator_painter.IndicatorPainter), [dart.legacy(core.int), dart.legacy(core.double)])
  }));
  dart.setLibraryUri(scrolling_dots_effect.ScrollingDotsEffect, I[3]);
  dart.setFieldSignature(scrolling_dots_effect.ScrollingDotsEffect, () => ({
    __proto__: dart.getFields(scrolling_dots_effect.ScrollingDotsEffect.__proto__),
    activeStrokeWidth: dart.finalFieldType(dart.legacy(core.double)),
    activeDotScale: dart.finalFieldType(dart.legacy(core.double)),
    maxVisibleDots: dart.finalFieldType(dart.legacy(core.int)),
    fixedCenter: dart.finalFieldType(dart.legacy(core.bool))
  }));
  var effect$1 = dart.privateName(color_transition_painter, "TransitionPainter.effect");
  color_transition_painter.TransitionPainter = class TransitionPainter extends indicator_painter.IndicatorPainter {
    get effect() {
      return this[effect$1];
    }
    set effect(value) {
      super.effect = value;
    }
    paint(canvas, size) {
      let t0, t0$;
      let current = this.offset[$floor]();
      let dotPaint = (t0 = ui.Paint.new(), (() => {
        t0.strokeWidth = this.effect.strokeWidth;
        t0.style = this.effect.paintStyle;
        return t0;
      })());
      let dotOffset = dart.notNull(this.offset) - current;
      for (let i = 0; i < dart.notNull(this.count); i = i + 1) {
        let color = this.effect.dotColor;
        if (i === current) {
          color = ui.Color.lerp(this.effect.activeDotColor, this.effect.dotColor, dotOffset);
        } else if (i - 1 === current) {
          color = ui.Color.lerp(this.effect.activeDotColor, this.effect.dotColor, 1.0 - dotOffset);
        }
        let xPos = i * dart.notNull(this.distance);
        let yPos = dart.notNull(size.height) / 2;
        let rRect = new ui.RRect.fromLTRBR(xPos, yPos - dart.notNull(this.effect.dotHeight) / 2, xPos + dart.notNull(this.effect.dotWidth), yPos + dart.notNull(this.effect.dotHeight) / 2, this.dotRadius);
        canvas.drawRRect(rRect, (t0$ = dotPaint, (() => {
          t0$.color = color;
          return t0$;
        })()));
      }
    }
  };
  (color_transition_painter.TransitionPainter.new = function(opts) {
    let effect = opts && 'effect' in opts ? opts.effect : null;
    let count = opts && 'count' in opts ? opts.count : null;
    let offset = opts && 'offset' in opts ? opts.offset : null;
    this[effect$1] = effect;
    color_transition_painter.TransitionPainter.__proto__.new.call(this, offset, count, effect);
    ;
  }).prototype = color_transition_painter.TransitionPainter.prototype;
  dart.addTypeTests(color_transition_painter.TransitionPainter);
  dart.addTypeCaches(color_transition_painter.TransitionPainter);
  dart.setMethodSignature(color_transition_painter.TransitionPainter, () => ({
    __proto__: dart.getMethods(color_transition_painter.TransitionPainter.__proto__),
    paint: dart.fnType(dart.void, [dart.legacy(ui.Canvas), dart.legacy(ui.Size)])
  }));
  dart.setLibraryUri(color_transition_painter.TransitionPainter, I[4]);
  dart.setFieldSignature(color_transition_painter.TransitionPainter, () => ({
    __proto__: dart.getFields(color_transition_painter.TransitionPainter.__proto__),
    effect: dart.finalFieldType(dart.legacy(color_transition_effect.ColorTransitionEffect))
  }));
  var activeStrokeWidth$0 = dart.privateName(color_transition_effect, "ColorTransitionEffect.activeStrokeWidth");
  color_transition_effect.ColorTransitionEffect = class ColorTransitionEffect extends indicator_effect.IndicatorEffect {
    get activeStrokeWidth() {
      return this[activeStrokeWidth$0];
    }
    set activeStrokeWidth(value) {
      super.activeStrokeWidth = value;
    }
    buildPainter(count, offset) {
      return new color_transition_painter.TransitionPainter.new({count: count, offset: offset, effect: this});
    }
  };
  (color_transition_effect.ColorTransitionEffect.new = function(opts) {
    let activeStrokeWidth = opts && 'activeStrokeWidth' in opts ? opts.activeStrokeWidth : 1.5;
    let offset = opts && 'offset' in opts ? opts.offset : null;
    let dotWidth = opts && 'dotWidth' in opts ? opts.dotWidth : 16;
    let dotHeight = opts && 'dotHeight' in opts ? opts.dotHeight : 16;
    let spacing = opts && 'spacing' in opts ? opts.spacing : 8;
    let radius = opts && 'radius' in opts ? opts.radius : 16;
    let dotColor = opts && 'dotColor' in opts ? opts.dotColor : C[0] || CT.C0;
    let activeDotColor = opts && 'activeDotColor' in opts ? opts.activeDotColor : C[14] || CT.C14;
    let strokeWidth = opts && 'strokeWidth' in opts ? opts.strokeWidth : 1;
    let paintStyle = opts && 'paintStyle' in opts ? opts.paintStyle : C[26] || CT.C26;
    this[activeStrokeWidth$0] = activeStrokeWidth;
    if (!(activeDotColor != null)) dart.assertFailed(null, I[5], 23, 16, "activeDotColor != null");
    if (!(activeStrokeWidth != null)) dart.assertFailed(null, I[5], 24, 16, "activeStrokeWidth != null");
    color_transition_effect.ColorTransitionEffect.__proto__.new.call(this, {dotWidth: dotWidth, dotHeight: dotHeight, spacing: spacing, radius: radius, strokeWidth: strokeWidth, paintStyle: paintStyle, dotColor: dotColor, activeDotColor: activeDotColor});
    ;
  }).prototype = color_transition_effect.ColorTransitionEffect.prototype;
  dart.addTypeTests(color_transition_effect.ColorTransitionEffect);
  dart.addTypeCaches(color_transition_effect.ColorTransitionEffect);
  dart.setMethodSignature(color_transition_effect.ColorTransitionEffect, () => ({
    __proto__: dart.getMethods(color_transition_effect.ColorTransitionEffect.__proto__),
    buildPainter: dart.fnType(dart.legacy(indicator_painter.IndicatorPainter), [dart.legacy(core.int), dart.legacy(core.double)])
  }));
  dart.setLibraryUri(color_transition_effect.ColorTransitionEffect, I[6]);
  dart.setFieldSignature(color_transition_effect.ColorTransitionEffect, () => ({
    __proto__: dart.getFields(color_transition_effect.ColorTransitionEffect.__proto__),
    activeStrokeWidth: dart.finalFieldType(dart.legacy(core.double))
  }));
  dart.trackLibraries("packages/smooth_page_indicator/src/painters/scrolling_dots_painter_with_fixed_center.dart", {
    "package:smooth_page_indicator/src/painters/scrolling_dots_painter_with_fixed_center.dart": scrolling_dots_painter_with_fixed_center,
    "package:smooth_page_indicator/src/painters/scrolling_dots_painter.dart": scrolling_dots_painter,
    "package:smooth_page_indicator/src/effects/scrolling_dots_effect.dart": scrolling_dots_effect,
    "package:smooth_page_indicator/src/painters/color_transition_painter.dart": color_transition_painter,
    "package:smooth_page_indicator/src/effects/color_transition_effect.dart": color_transition_effect,
    "package:smooth_page_indicator/smooth_page_indicator.dart": smooth_page_indicator
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["scrolling_dots_painter_with_fixed_center.dart","scrolling_dots_painter.dart","../effects/scrolling_dots_effect.dart","color_transition_painter.dart","../effects/color_transition_effect.dart"],"names":[],"mappings":"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","file":"../../../../../../../../../../D:/packages/smooth_page_indicator/src/painters/scrolling_dots_painter_with_fixed_center.dart.lib.js"}');
  // Exports:
  return {
    src__painters__scrolling_dots_painter_with_fixed_center: scrolling_dots_painter_with_fixed_center,
    src__painters__scrolling_dots_painter: scrolling_dots_painter,
    src__effects__scrolling_dots_effect: scrolling_dots_effect,
    src__painters__color_transition_painter: color_transition_painter,
    src__effects__color_transition_effect: color_transition_effect,
    smooth_page_indicator: smooth_page_indicator
  };
}));

//# sourceMappingURL=scrolling_dots_painter_with_fixed_center.dart.lib.js.map
